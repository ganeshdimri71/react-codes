Context:
Context provides a way to pass data through the component tree without having to pass props down manually at evry level.
Context is a mechanism with the help of which we can access the prop that is defined in the top level in any component without passing it to each and every component.
A place you provide the context is important because only the descendant component can consume it.
Basic code example:
App.js

import React, { Component } from 'react'
import ComponentC from './components/ComponentC'
import { UserProvider } from './components/userContext'

class App extends Component {
  render() {
    return (
      <div>
        <UserProvider value='Vishwas'>
          <ComponentC />
        </UserProvider>
      </div>
    )
  }
}

export default App

userContext.js
import React from 'react'

const UserContext = React.createContext()

const UserProvider = UserContext.Provider
const UserConsumer = UserContext.Consumer

export {UserProvider, UserConsumer}

ComponentC.js
import React, { Component } from 'react'
import ComponentE from './ComponentE'

 class ComponentC extends Component {
  render() {
      return (
          <ComponentE />
    )
  }
}

export default ComponentC

ComponentE.js
import React, { Component } from 'react'
import ComponentF from './ComponentF'

class ComponentE extends Component {
    render() {
        return (
            <ComponentF />
        )
    }
}

export default ComponentE

ComponentF.js
import React, { Component } from 'react'
import { UserConsumer } from './userContext'

export class ComponentF extends Component {
    render() {
        return (
            <UserConsumer>
                {
                    username => {
                        return <div>Hello {username}</div>
                    }
                }
            </UserConsumer>
        )
    }
}

export default ComponentF

We can set the default value to our context while creating the context. This default value can be used when the Provider component does not have a Provider Component above it.

Code example of contextType.

App.js
import React, { Component } from 'react'
import ComponentC from './components/ComponentC'
import { UserProvider } from './components/userContext'

class App extends Component {
  render() {
    return (
      <div>
        <UserProvider value='Vishwas'>
          <ComponentC />
        </UserProvider>
      </div>
    )
  }
}

export default App


userContext.js
import React from 'react'

const UserContext = React.createContext()

const UserProvider = UserContext.Provider
const UserConsumer = UserContext.Consumer

export {UserProvider, UserConsumer}

ComponentC.js
import React, { Component } from 'react'
import ComponentE from './ComponentE'

 class ComponentC extends Component {
  render() {
      return (
          <ComponentE />
    )
  }
}

export default ComponentC

ComponentE.js
import React, { Component } from 'react'
import ComponentF from './ComponentF'
import UserContext from './userContext'

class ComponentE extends Component {

    render() {
        return (
            <div>
                Component E context {this.context}
                <ComponentF />
            </div>

        )
    }
}

ComponentE.contextType = UserContext

export default ComponentE

ComponentF.js
import React, { Component } from 'react'
import { UserConsumer } from './userContext'

export class ComponentF extends Component {
    render() {
        return (
            <UserConsumer>
                {
                    username => {
                        return <div>Hello {username}</div>
                    }
                }
            </UserConsumer>
        )
    }
}

export default ComponentF

Instead of using ComponentE.contextType = UserContext we can use static contextType = UserContext

Code Example:
Only the change is to be made in the componentE.js
import React, { Component } from 'react'
import ComponentF from './ComponentF'
import UserContext from './userContext'

class ComponentE extends Component {
    static contextType = UserContext
    render() {
        return (
            <div>
                Component E context {this.context}
                <ComponentF />
            </div>

        )
    }
}

export default ComponentE



Limitation of  static contextType = UserContext
It is only limited to the class component.
We cannot use muliple UserContext wth this.

