Event is a function and not a function call do not add the paraenthesis. 
code example of event handling in functional component
App.js

import React from 'react'
import './App.css'
import FunctionClick from './components/FunctionClick'

const App = () => {
  return (
    <div className='App'>
      <FunctionClick></FunctionClick>
    </div>
  )
}

export default App

FunctionClick.js

import React from 'react'

const FunctionClick = () => {
    function clickHandler() {
        console.log('Button Clicked...!')
    }
    return (
        <div>
            <button onClick={clickHandler}>Click</button>
        </div>
    )
}

export default FunctionClick


code example of event handling in Class Component

App.js is same as above

ClassClick.js

import React, { Component } from 'react'

export default class ClassClick extends Component {
    onClickHandler() {
        console.log('clicked the button')
    }
    render() {
        return (
            <div>
                <button
                    onClick={this.onClickHandler}
                >Click Me</button>
            </div>
        )
    }
}


Binding eventHandler in React


code example showing error Ã—
TypeError: Cannot read properties of undefined (reading 'setState')

App.js
It is same as above.
EventBind.js
import React, { Component } from 'react'

export class EventBind extends Component {
    constructor(props) {
        super(props)

        this.state = {
            message: "Hello"
        }
    }
    clickHandler() {
        this.setState({
            message: "Goodbye"
        })
		console.log(this)  // This is undefined in this case.
    }
    render() {
        return (
            <div>
                <button
                    onClick={this.clickHandler}
                >{this.state.message}</button>
            </div>
        )
    }
}

export default EventBind



Methods to solve the above problem.

Method 1:
This method will create the performance issue because on every render a new instance of the function will be created.

import React, { Component } from 'react'

export class EventBind extends Component {
    constructor(props) {
        super(props)

        this.state = {
            message: "Hello"
        }
    }
    clickHandler() {
        this.setState({
            message: "Goodbye"
        })
        console.log(this)
    }
    render() {
        return (
            <div>
                <button
                    onClick={this.clickHandler.bind(this)}
                >{this.state.message}</button>
            </div>
        )
    }
}

export default EventBind

Method 2:
In this approach we are calling a function and returning it so the parenthesis is requried. This method also have a performance implications in certain scenario.


<button onClick={()=>this.clickHandler()}>{this.state.message}</button>


Method 3:
This is the best method because the binding happens once in the constructor...!

import React, { Component } from 'react'

export class EventBind extends Component {
    constructor(props) {
        super(props)

        this.state = {
            message: "Hello"
        }
        this.clickHandler = this.clickHandler.bind(this)
    }
    clickHandler() {
        this.setState({
            message: "Goodbye"
        })
        console.log(this)
    }
    render() {
        return (
            <div>
                <button
                    onClick={this.clickHandler}
                >{this.state.message}
                </button>
            </div>
        )
    }
}

export default EventBind


Method 4:

Class properties as arrow function:

import React, { Component } from 'react'

export class EventBind extends Component {
    constructor(props) {
        super(props)

        this.state = {
            message: "Hello"
        }
       
    }
    clickHandler = ()=> {
        this.setState({
            message: "Goodbye"
        })
        console.log(this)
    }
    render() {
        return (
            <div>
                <button
                    onClick={this.clickHandler}
                >{this.state.message}
                </button>
            </div>
        )
    }
}

export default EventBind



