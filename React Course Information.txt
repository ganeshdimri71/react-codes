1. Basic information on react js...!
2. Component, difference betwen functional and class components.
3. Project Folder Structure and difference between npx and npm...!
4. Functional Component and difference between default and named exports, class component, JSX,JSX code example, JSX difference,
5. props and its example.
6. props vs state, how state are used in the class components, code example where we are changing the state object by clicking the button.
7. setState definition and usage, code example of state not been updated to UI but to the console,calls to setState are asynchronous. Code example of two console.log one is outside the setState function and the other is inside the callback function that is passed as a parameter to the setState function.!A example to solve the addressed issue. Destructing syntax
   code example of destructing.! Destructing in the class component. code example of destructing the props in class component.
   
8. Events Handling in functional and class components. code example of the event handling in functinal component.Binding EventHandler in React.Four methods of binding the events to the class components.
9. Child and Parent communications, Execution of the method defined in the Parent component in the child component, passing methods to the child component as props, do not add parenthesis when passing the methos as a props to the child component.
   arrow function as a way to pass a parameter from the child component to the parent component Code Execution 
   
10. Conditional Rendering
    if/else = code Example.
	Element variables = Code Example
	Ternary conditional approach = code example:
	
	Short Circuit Approach:
	It is a special case of the ternary operator.
	When we want to return something or nothing we use this approach.
	Short Circuit code example

11. List in React JS:
	code example of list rendering:
	A standard code example of rendering a List in React JS:
	List and Keys in React JS: Code Example:
	Index as a Key: code Example:
   When to use index as a key:
   
 12. Apply css based on props =  code Example
     Class name as template Literals = code Example
	 Inline Styling.
	 Module.
	 
13. Controlled Components
    Code Example of controlled components(input textarea and select tag)
   
14. Lifecycle Methods:
   
15. Mounting Lifecycle Methods:
    Code Example of Moutning lifecycle methods:
	Code Example of Mounting lifecycle methods of a parent and a child component.
    
16. Updating Lifecycle Methods:
    Code Example:
	
	Unmounting Phase:
	componentWillUnmount():
	
17. React Fragments:

   Three Code Example...!
   
18. Pure Component, Regular Component and Parent Component, Shallow Component.
    Code Example
	
App.js
	
	import React from 'react'
import './App.css'
import ParentComponent from './components/ParentComponent'

const App = () => {
  return (
    <div className='App'>
      <ParentComponent />
    </div>
  )
}

export default App

 ParentComponent.js
  
  import React, { Component } from 'react'
import PureComponents from './PureComponents'
import RegularComponent from './RegularComponent'

class ParentComponent extends Component {
    constructor(props) {
        super(props)

        this.state = {
            name: 'Vishwas'
        }
    }
    componentDidMount() {
        setInterval(() => {
            this.setState({ name: 'Vishwas' })
        }, 2000)
    }
    render() {
        console.log('***ParentComponent Render****')
        return (
            <div>ParentComponent
                <RegularComponent name={this.state.name} />
                <PureComponents name={this.state.name}/>
            </div>

        )
    }
}

export default ParentComponent

RegularComponet.js
import React, { Component } from 'react'

 class RegularComponent extends Component {
     render() {
         console.log('***RegularComponent Render****')
    return (
        <div>RegularComponent {this.props.name }</div>
    )
  }
}

export default RegularComponent

ParentComponent.js
import React, { PureComponent } from 'react'

 class PureComponents extends PureComponent {
   render() {
     console.log('***PureComponents Render****')
    return (
      <div>PureComponent {this.props.name}</div>
    )
  }
}

export default PureComponents


19. React.memo

20. Concept of Refs:
    Code Example of Ref:
	Second Approach of creating refs with code example:
	Adding refs to the class component:
	When clicking on the button in the parent component the child element should get the focus.
	Code Example of the above written line:
	Forwarding Ref
	
21 DOM Portal:
   The first parameter to the DOM Portal can be the any html element that we want to render and the second parameter is the element inside which we want to render the html element.
   
   Code Example
   
22 Error Handling Phase Methods
   Code Example of Error Boundary
   
23. Higher Order Component.
    Code Example of repeating the code.
	Code Example of HOC.
	Code Example of passing a props to the child component and recieving it in the HOC.
	Code Example of passing a parameter to the HOC function

24. RenderProps
    Simple Code Example of render props.
	
25. Context
    Basic example of context with code.
	Default value for the context.
	Context type property = Code Example.
	
26. React and Http.
    Get Request Code Example:
	Post Request Code Example:
	
27. Hooks:
    Code Example of class state and function state:
	Code Example of updating the state value based on the previous state using the class and functional component.
	Making a Object as a State variable = Code Example.
	Making a Array as a State variable = Code Example.
	A state variable can be a number array, Object or Boolean.
	
28. useEffect
    Code Example of useEffect in class and functional Component
	Code Example of Conditionally running the useEffect in class and functional component
	
ClassCounterOne.js
import React, { Component } from 'react'

class ClassCounterOne extends Component {
    constructor(props) {
        super(props)

        this.state = {
            count: 0,
            name: ''
        }
    }
    componentDidMount() {
        document.title = `Clicked ${this.state.count
            } times`
    }
    componentDidUpdate(prevProps, prevState) {

        if (prevState.count !== this.state.count) {
            console.log('Updating the document title')
            document.title = `Clicked ${this.state.count
                } times`
        }

    }
    render() {
        return (
            <div>
                <input type="text" value={this.state.name} onChange={(event) => this.setState({ name: event.target.value })} />
                <button
                    onClick={() => this.setState({ count: this.state.count + 1 })}
                >Click {this.state.count} times</button>
            </div>
        )
    }
}

export default ClassCounterOne

HookCounterOne.js
import React, { useEffect, useState } from 'react'

function HookCounterOne() {
    const [count, setCount] = useState(0)
    const [name, setName] = useState('')
    useEffect(() => {
        console.log('useEffect');
        document.title = `You clicked ${count} times`
    }, [count])
    return (
        <div>
            <input type="text" value={name} onChange={(e) => setName(e.target.value)} />
            <button
                onClick={() => setCount(prevState => prevState + 1)}
            >Count : {count}</button>
        </div>
    )
}

export default HookCounterOne
	
    
   
      
	
	
    
    
    
	
    